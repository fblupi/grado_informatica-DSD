/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _ASOCIACION_H_RPCGEN
#define _ASOCIACION_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define TAMA 128

typedef int ID;

typedef char *Clave;

typedef char *Valor;

typedef struct Entrada *EntradaPtr;

typedef struct Diccionario *DiccionarioPtr;

enum Estado {
	OK = 0,
	FALLO = 1,
	REEMPLAZADO = 2,
};
typedef enum Estado Estado;

struct Entrada {
	Clave clave;
	Valor valor;
	EntradaPtr sig;
};
typedef struct Entrada Entrada;

struct Diccionario {
	ID id;
	DiccionarioPtr sig;
	EntradaPtr first;
};
typedef struct Diccionario Diccionario;

struct ResultEntrada {
	Estado e;
	union {
		Valor valor;
	} ResultEntrada_u;
};
typedef struct ResultEntrada ResultEntrada;

struct ResultDiccionario {
	Estado e;
	union {
		Entrada entrada;
	} ResultDiccionario_u;
};
typedef struct ResultDiccionario ResultDiccionario;

struct ponerasociacion_1_argument {
	ID arg1;
	Clave arg2;
	Valor arg3;
};
typedef struct ponerasociacion_1_argument ponerasociacion_1_argument;

struct obtenerasociacion_1_argument {
	ID arg1;
	Clave arg2;
};
typedef struct obtenerasociacion_1_argument obtenerasociacion_1_argument;

struct borrarasociacion_1_argument {
	ID arg1;
	Clave arg2;
};
typedef struct borrarasociacion_1_argument borrarasociacion_1_argument;

#define ASOCIACIONPROG 0x20000001
#define ASOCIACION 1

#if defined(__STDC__) || defined(__cplusplus)
#define ponerAsociacion 1
extern  Estado * ponerasociacion_1(ID , Clave , Valor , CLIENT *);
extern  Estado * ponerasociacion_1_svc(ID , Clave , Valor , struct svc_req *);
#define obtenerAsociacion 2
extern  ResultEntrada * obtenerasociacion_1(ID , Clave , CLIENT *);
extern  ResultEntrada * obtenerasociacion_1_svc(ID , Clave , struct svc_req *);
#define borrarAsociacion 3
extern  Estado * borrarasociacion_1(ID , Clave , CLIENT *);
extern  Estado * borrarasociacion_1_svc(ID , Clave , struct svc_req *);
#define enumerar 4
extern  ResultDiccionario * enumerar_1(ID , CLIENT *);
extern  ResultDiccionario * enumerar_1_svc(ID , struct svc_req *);
extern int asociacionprog_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define ponerAsociacion 1
extern  Estado * ponerasociacion_1();
extern  Estado * ponerasociacion_1_svc();
#define obtenerAsociacion 2
extern  ResultEntrada * obtenerasociacion_1();
extern  ResultEntrada * obtenerasociacion_1_svc();
#define borrarAsociacion 3
extern  Estado * borrarasociacion_1();
extern  Estado * borrarasociacion_1_svc();
#define enumerar 4
extern  ResultDiccionario * enumerar_1();
extern  ResultDiccionario * enumerar_1_svc();
extern int asociacionprog_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_ID (XDR *, ID*);
extern  bool_t xdr_Clave (XDR *, Clave*);
extern  bool_t xdr_Valor (XDR *, Valor*);
extern  bool_t xdr_EntradaPtr (XDR *, EntradaPtr*);
extern  bool_t xdr_DiccionarioPtr (XDR *, DiccionarioPtr*);
extern  bool_t xdr_Estado (XDR *, Estado*);
extern  bool_t xdr_Entrada (XDR *, Entrada*);
extern  bool_t xdr_Diccionario (XDR *, Diccionario*);
extern  bool_t xdr_ResultEntrada (XDR *, ResultEntrada*);
extern  bool_t xdr_ResultDiccionario (XDR *, ResultDiccionario*);
extern  bool_t xdr_ponerasociacion_1_argument (XDR *, ponerasociacion_1_argument*);
extern  bool_t xdr_obtenerasociacion_1_argument (XDR *, obtenerasociacion_1_argument*);
extern  bool_t xdr_borrarasociacion_1_argument (XDR *, borrarasociacion_1_argument*);

#else /* K&R C */
extern bool_t xdr_ID ();
extern bool_t xdr_Clave ();
extern bool_t xdr_Valor ();
extern bool_t xdr_EntradaPtr ();
extern bool_t xdr_DiccionarioPtr ();
extern bool_t xdr_Estado ();
extern bool_t xdr_Entrada ();
extern bool_t xdr_Diccionario ();
extern bool_t xdr_ResultEntrada ();
extern bool_t xdr_ResultDiccionario ();
extern bool_t xdr_ponerasociacion_1_argument ();
extern bool_t xdr_obtenerasociacion_1_argument ();
extern bool_t xdr_borrarasociacion_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_ASOCIACION_H_RPCGEN */
